#!/usr/bin/env perl

use warnings;
use strict;

use Pod::Usage;
use Getopt::Long;

use FindBin qw($RealBin);
use lib "$RealBin/../lib/";

use List::Util;

use Verbose;
use Verbose::ProgressBar;

use Sam::Parser 0.11;
use Sam::Alignment 0.10 ':flags';
use Sam::Seq 1.0.0;

use Fasta::Parser;
use Fasta::Seq;

use Fastq::Parser;
use Fastq::Seq 0.13.0;

use constant {
	OFFSET => 0,
	LENGTH => 1,
};

use Storable qw(dclone);

our $VERSION  = '0.10.1';



=head1 NAME

sam2cns

=cut

=head1 DESCRIPTION

Compute consensus sequences from BAM file.

=head1 SYNOPSIS

  bam2cns <OPTIONS>

=cut



##------------------------------------------------------------------------##

# load core defaults
my $cfg_core_file = "$RealBin/../proovread.cfg";
my %cfg = do $cfg_core_file;

# custom config
my $cfg;
for(my $i=0; $i<@ARGV; $i++){
	if($ARGV[$i] =~ /-c$|--cfg$/){
		$cfg = $ARGV[$i+1];
		%cfg = (%cfg, do "$cfg");
		last;
	}
}

my %opt;

=head1 OPTIONS

=cut

=over 12

=item --bam=<PATHNAME>

A sorted BAM file, from which a consensus sequence for each reference sequence
 is to be calculated.

=item [--prefix=<STRING>]

Prefix for output files.

=item [--ref=<PATHNAME>]

Reference sequences in FASTA or FASTQ format. If FASTQ is provided, detects MCR
 tags in header description and inlcudes corresponding sequence information in
 the consensus computation.

=item [--ref-offset=<INT>]

A byte offset at which to start running through the --ref-in file.

=item [--max-ref-seqs=<INT>] [0]

Maximum number of reference reads to correct. Default OFF.

=item [--coverage=<INT>] [50]

Estimated coverage.

=item [--qv-offset=<INT>] [33]

Quality offset.

=item [--ignore-mcr] [OFF]

Boolean. Do not parse and use MCRs from reference file in consensus calls.

=item [--[no]-use-ref-qual] [ON]

Utilize reference qualities values as weights in consensus computation.

=item [--qual-weighted] [OFF]

Utilize qualities of aligned reads as weights in consensus computation.

=item [--detect-chimera] [OFF]

Boolean. Dectect, tag, and if possible resolve chimeric sequences.

=item [--chimera-min-score=<FLOAT>] [0]

Minimum score threshold for chimeras.

=item [--max-ins-length=<INT>] [0]

Ignore inserts longer than this in alignments (possible artefacts).

=item [--bin-size] [20]

Bin size for local score comparison.

=item [--fallback-phred]

Use qualities with this phred for sequences w/o quality information.

=item [--mask-weak-reads=<INT>] [20]

=item [--ignore-weak-reads=<INT>] [20]

Simple do not generate consensus for weakly supported reads, output them
 unprocessed.

=item [--append] [OFF]

Append output if output file already exists

=item [--samtools-path]

PATH to samtools binaries. Assumes exported by default.

=item [--cfg=<STRING>]

Config file.

=item [--debug]

Toggle debug messages.

=back

=cut


%opt = (
        'cfg=s' => \$cfg,
        'prefix=s' => \(my $opt_pre = ''),
        'bam=s' => \(my $opt_bam_file),
        'ref=s' => \(my $opt_ref_pat),
        'ref-offset=i' => \(my $opt_ref_offset),
        'max-ref-seqs|max-reads=s' => \(my $opt_max_reads = 0),
        'coverage=s' => \(my $opt_cov = 50),
        'qv-offset=s' => \(my $opt_qv_offset = 33),
        'ignore-mcr|ignore-hcr' => \(my $opt_ignore_mcr),
        'use-ref-qual!' => \(my $opt_use_ref_qual = 1),
        'qual-weighted!' => \(my $opt_qual_weighted = 0),
        'detect-chimera!' => \(my $opt_detect_chimera),
        'chimera-min-score=f' => \(my $opt_chimera_min_score = 0),
        'max-ins-length=i' => \(my $opt_max_ins_length = 0),
        'bin-size' => (my $opt_bin_size = 20),
        'fallback-phred=i' => \(my $opt_fallback_phred = undef),

        'invert-scores!'=> \(my $opt_invert_scores),

        'utg-mode!' => \(my $opt_utg_mode),
        'rep-coverage=i' => \(my $opt_rep_coverage = undef),
        'min-ncscore=f' => \(my $opt_min_ncscore = undef),

        'haplo-coverage!' => \(my $opt_haplo_coverage = 0),

        'mask-weak-reads=i' => \(my $opt_mask_weak_reads = 20),
        'ignore-weak-reads=i' => \(my $opt_ignore_weak_reads = 20),

        'append!' => \(my $opt_append),
        'samtools-path' => \(my $opt_samtools_path = undef),
        'debug!' => \(my $debug = $cfg{debug}),

        'sr-min-length' => 0, # deprecated but keep for backward comp.
);




##------------------------------------------------------------------------##

=head1 MAIN

=cut

GetOptions(%opt) or pod2usage(1);
$opt_bam_file || pod2usage(msg => 'BAM file required');

my $v = Verbose->new();

# TODO: samtools-path <-> bwa_path
my $samtools = ($opt{bwa_path} ? $opt{bwa_path}."/" : '')."samtools";
# init sam parser
open(SAM, "$samtools view -H $opt_bam_file |") or $v->exit($!);
my $sp = Sam::Parser->new(fh => \*SAM);

Sam::Seq->Trim($cfg{'sr-trim'});
Sam::Seq->InDelTabooLength($cfg{'sr-indel-taboo-length'});
Sam::Seq->InDelTaboo($cfg{'sr-indel-taboo'});
Sam::Seq->MaxCoverage($opt_cov);
Sam::Seq->BinSize($opt_bin_size);
Sam::Seq->MaxInsLength($opt_max_ins_length);
Sam::Seq->FallbackPhred($opt_fallback_phred) if defined($opt_fallback_phred);
Sam::Seq->RepCoverage($opt_rep_coverage) if defined $opt_rep_coverage;
Sam::Seq->MinNCScore($opt_min_ncscore) if defined $opt_min_ncscore;

Sam::Alignment->InvertScores(1) if $opt_invert_scores;

# use glob, to allow glob pattern instead of full filename (fa/fq is decided by parser)
my $opt_ref_file;
my $rpr;

if($opt_ref_pat){
	($opt_ref_file) = glob("'${opt_ref_pat}'");
	$v->exit("Reference file not found ($opt_ref_pat)") unless $opt_ref_file;
	# init fastq/fasta parser
	$rpr = Fastq::Parser->new(file => $opt_ref_file)->check_format;
	if($rpr){
		my $po = $rpr->guess_phred_offset();
		$v->exit("Detected [$po] and specified [$opt_qv_offset] phred offsets differ!") if defined ($opt_qv_offset) && defined ($po) && $po != $opt_qv_offset;
		$po = $po || $opt_qv_offset;
		$v->exit("Cannot guess phred offset from provided reference file, please specify --qv-offset")
			unless $po;
		$rpr->phred_offset($po);

	}else{
		$rpr = Fasta::Parser->new(file => $opt_ref_file)->check_format;
                $opt_use_ref_qual = 0; # does not make sense with fasta
                unless ($opt_ignore_mcr){
			$opt_ignore_mcr++;
			# $v->verbose('Cannot restore MCR information from FASTA, --ignore-mcr set to TRUE');
		}
	}
	$v->exit("Unknown format of reference file: $opt_ref_file") unless $rpr;
}

# output files
my $fq_out =  $opt_pre.'.fq';
my $fqi_out = $opt_pre.'.ignored.tsv'; # ignored
my $fc_out =  $opt_pre.'.chim.tsv'; # chimera annot
my $tr_out =  $opt_pre.'.debug.trace';
my $bam_out = $opt_pre.'.debug.bam';

my $mode = $opt_append ? ">>" : ">";

my $fqh;
open($fqh, $mode, $fq_out) || $v->exit("Can't open output read file: '$fq_out'");
my $fih;
open($fih, $mode, $fqi_out) || $v->exit("Can't open output read file: '$fqi_out'");
my $fch;
open($fch, $mode, $fc_out) || $v->exit("Can't open output read file: '$fc_out'");
my $trh;
if($debug){
    open($trh, $mode, $tr_out) || $v->exit("Can't open output read file: '$tr_out'");
}

my $bfh;
if ( $debug ) {
    open($bfh, "| $samtools view -b - > $bam_out") or die $!;
    open(SAM, "$samtools view -H $opt_bam_file |") or $v->exit($!);
    while (<SAM>) {
        print $bfh $_;
    }
    close SAM;
}

##----------------------------------------------------------------------------##
# read ref
my %LR;
my @LR_IDS;

if($rpr){ # read fasta to get ref id, length and seq
	$rpr->seek($opt_ref_offset) if $opt_ref_offset;
	my $ref_c = 0;
	while(my $ref = $rpr->next_seq()){
          $LR{$ref->id} = {
			ref => $ref,
			len => length($ref->seq),
			id => $ref->id
		};
		push @LR_IDS, $ref->id;
          	last if $opt_max_reads && ++$ref_c >= $opt_max_reads;

	}
}else{# read the sam header to get ref ids and length
	while(my %h = $sp->next_header_line('SQ')){
		$LR{$h{'SN'}} = {
			id => $h{SN},
			len => $h{LN},
		};
	}
}

@LR_IDS = sort byfile @LR_IDS;


##----------------------------------------------------------------------------##
# read BAM

my $sso;

foreach my $ref_id(@LR_IDS){

    # create new block with $aln = first entry

    open(SAM, "$samtools view $opt_bam_file \"$ref_id:\" |") or $v->exit($!);
    my $sp = Sam::Parser->new(fh => \*SAM);

    $sso = Sam::Seq->new(
                         id => $LR{$ref_id}{id},
                         len => $LR{$ref_id}{len},
                         ref => $rpr ? $LR{$ref_id}{ref} : undef,
                        );

    while(my $aln = $sp->next_aln()){
        $v->exit("$ref_id ne $aln->rname") unless $ref_id eq $aln->rname;
        $v->exit("Cannot handle BAM secondary alignments without seq/qual") if $aln->seq eq "*";

        if ($opt_utg_mode) { # no binning for utgs
            $sso->add_aln($aln);
        }else {
            $sso->add_aln_by_score($aln);
        }
    }

    generate_consensus($sso);

    # print to filtered BAM for debug
    if ($debug) {
        print $bfh $sso->string(sorted => 1);
    }

    close SAM;
    $sp = undef;
}

close $bfh if $bfh;

=head2 generate_consensus

Takes a Sam::Seq object, creates, processes and outputs consensus

=cut

sub generate_consensus{
	my $sso = shift; # Sam::Seq object

        my @mcrs = ();
        my @hpl_covs = ();
        my $hpl_cov;

	if($rpr && ! $opt_ignore_mcr){
		if(my $mcrs = $sso->ref->desc){
                        while($mcrs =~ /MCR\d+:(\d+),(\d+)/g){
				push @mcrs, [$1, $2];
			}
                        while($mcrs =~ /HPL:(\d+)/g){
				push @hpl_covs, $1;
			}
		};
	}

        # run filter
        $sso->filter_by_ncscore if defined $opt_min_ncscore;
        $sso->filter_rep_region_alns if defined $opt_rep_coverage;

        # filter contained alignments and add overlap regions to ignore_coords
        my @owin;
        if ( $opt_utg_mode ) {
            $sso->filter_contained_alns;

            # filter overlap regions
            my @cov = $sso->coverage(1);
            my $cmax = $opt_rep_coverage;
            my $high = 0;


            for (my $i=0; $i<@cov; $i++) {
                if ($cov[$i] < $cmax) {
                    if ($high) {
                        $high = 0;
                        $owin[$#owin][1] = $i - $owin[$#owin][0];
                    }
                } else {
                    unless ($high) {
                        $high = 1;
                        push @owin, [$i];
                    }
                }
            }
            $owin[$#owin][1] = @cov - $owin[$#owin][0] if $high;
        }

        my $con;

        if ($opt_haplo_coverage) {
            $sso->call_variants(
                min_prob => .2,
                min_freq => 3,
                or_min => 1,
            );
            die "haploc_consensus??";
        } else {
            $con = $sso->consensus(
                use_ref_qual => $opt_use_ref_qual,
                ignore_coords => [@mcrs, @owin],
                qual_weighted => $opt_qual_weighted,
            );
        }

        if($debug){
            print $trh "$con";
            print $trh $con->{trace},"\n" if $con->{trace}; # no trace for haplo_cov
        }

	# chimera
	detect_chimera($sso, $con) if $opt_detect_chimera;

	# undef state matrix to make memory availabe again
	$sso->{_state_matrix} = {};

	# write current fastq
	print $fqh "$con";

}

=head2 detect_chimera

=cut

sub detect_chimera{
    my ($sso, $con) = @_;
    my @coords = $sso->chimera();

    if (@coords) {
        my $i;
        my %cigar = (M=>0, I=>0, D=>0);
        for ($i=0; $i<@coords; $i++) {

            my $fr = $coords[$i]{col_range}[0];
            my $to = $coords[$i]{col_range}[1];
            my $sc = $coords[$i]{score};

            # use cigar to compute correct location of chimera coords on corrected seq.
            # -I, +D
            # get read cigar, eg 80M2D3M
            # /g remembers position even between multiple calls to while on same cigar
            # hence we can just always add to %cigar outside the for loop
            while ($con->{cigar} =~ m/(\d+)(\w)/g && ($cigar{M}+$cigar{I} < $fr)) {
                $cigar{$2}+=$1;
            }

            my $pos_corr = $cigar{D}-$cigar{I}; # corrected string has additional nucs
            # at D's and has lost nucs at I's
            $fr+=$pos_corr;
            $to+=$pos_corr;

            printf $fch("%s\t%d\t%d\t%s\n", $sso->id, $fr, $to, $sc);
        }
    }
}



=head2 byfile

Sort function for "natural" filesorting, descending.

=cut

sub byfile{
    my @a = split /(\d+)/, $a;
    my @b = split /(\d+)/, $b;
    my $M = @a > @b ? @a : @b;
    my $res = 0;
    for (my $i = 0; $i < $M; $i++) {
        return -1 if ! defined $a[$i];
        return 1 if  ! defined $b[$i];
        if ($a[$i] =~ /\d/) {
            $res = $a[$i] <=> $b[$i];
        } else {
            $res = $a[$i] cmp $b[$i];
        }
        last if $res;
    }
    $res;
}



=head1 AUTHORS

Thomas Hackl S<thomas.hackl@uni-wuerzburg.de>

=cut
